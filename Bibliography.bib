
@article{noschinski_graph_2014,
	title = {A Graph Library for Isabelle},
	issn = {1661-8270, 1661-8289},
	url = {http://link.springer.com/article/10.1007/s11786-014-0183-z},
	doi = {10.1007/s11786-014-0183-z},
	abstract = {In contrast to other areas of mathematics such as calculus, number theory or probability theory, there is currently no standard library for graph theory for the Isabelle/{HOL} proof assistant. We present a formalization of directed graphs and essential related concepts. The library supports general infinite directed graphs (digraphs) with labeled and parallel arcs, but care has been taken not to complicate reasoning on more restricted classes of digraphs. We use this library to formalize a characterization of Euler Digraphs and to verify a method of checking Kuratowski subgraphs used in the {LEDA} library.},
	pages = {1--17},
	journaltitle = {Mathematics in Computer Science},
	shortjournal = {Math.Comput.Sci.},
	author = {Noschinski, Lars},
	urldate = {2014-11-04},
	date = {2014-06-28},
	langid = {english},
	keywords = {Computer Science, general, Euler, Graph theory, {HOL}, Isabelle, Kuratowski, Mathematics, general, Primary 05C20, Secondary 05C45},
	file = {Full Text PDF:/home/leo/.mozilla/firefox/dlbwkpok.default/zotero/storage/8UU6E6VV/Noschinski - 2014 - A Graph Library for Isabelle.pdf:application/pdf;Snapshot:/home/leo/.mozilla/firefox/dlbwkpok.default/zotero/storage/94STTSU7/s11786-014-0183-z.html:text/html}
}

@article{butler_pvs_1998,
	title = {A {PVS} Graph Theory Library},
	author = {Butler, Ricky W and Sjogren, Jon A},
	date = {1998}
}

@incollection{bertot_canonical_2008,
	title = {Canonical Big Operators},
	rights = {©2008 Springer Berlin Heidelberg},
	isbn = {978-3-540-71065-3, 978-3-540-71067-7},
	url = {http://link.springer.com/chapter/10.1007/978-3-540-71067-7_11},
	series = {Lecture Notes in Computer Science},
	abstract = {In this paper, we present an approach to describe uniformly iterated "big" operations to provide lemmas that encapsulate all the commonly used reasoning steps on these constructs. We show that these iterated operations can be handled generically using the syntactic notation and canonical structure facilities provided by the Coq system. We then show how these canonical big operations played a crucial enabling role in the study of various parts of linear algebra and multi-dimensional real analysis, as illustrated by the formal proofs of the properties of determinants, of the Cayley-Hamilton theorem and of Kantorovitch’s theorem.},
	pages = {86--101},
	number = {5170},
	booktitle = {Theorem Proving in Higher Order Logics},
	publisher = {Springer Berlin Heidelberg},
	author = {Bertot, Yves and Gonthier, Georges and Biha, Sidi Ould and Pasca, Ioana},
	editor = {Mohamed, Otmane Ait and Muñoz, César and Tahar, Sofiène},
	urldate = {2014-11-05},
	date = {2008-01-01},
	langid = {english},
	keywords = {Artificial Intelligence (incl. Robotics), Logic Design, Logics and Meanings of Programs, Mathematical Logic and Formal Languages, Software Engineering},
	file = {Full Text PDF:/home/leo/.mozilla/firefox/dlbwkpok.default/zotero/storage/JD34RV59/Bertot et al. - 2008 - Canonical Big Operators.pdf:application/pdf;Snapshot:/home/leo/.mozilla/firefox/dlbwkpok.default/zotero/storage/URUI9QDA/978-3-540-71067-7_11.html:text/html}
}

@inproceedings{sobrinho_routing_2010,
	title = {Routing in Equilibrium},
	abstract = {Abstract — Some path problems cannot be modeled using semirings because the associated algebraic structure is not distributive. Rather than attempting to compute globally optimal paths with such structures, it may be sufficient in some cases to find locally optimal paths—paths that represent a stable local equilibrium. For example, this is the type of routing system that has evolved to connect Internet Service Providers ({ISPs}) where link weights implement bilateral commercial relationships between them. Previous work has shown that routing equilibria can be computed for some non-distributive algebras using algorithms in the Bellman-Ford family. However, no polynomial time bound was known for such algorithms. In this paper, we show that routing equilibria can be computed using Dijkstra’s algorithm for one class of non-distributive structures. This provides the first polynomial time algorithm for computing locally optimal solutions to path problems. We discuss possible applications to Internet routing. I. {GLOBAL} {VS}. {LOCAL} {OPTIMA} A great deal of research has followed from the observation—first made about 40 years ago—that the linear algebra structure (R, +, ×, 0, 1) and many of its associated algorithms can be generalized to a very large class of algebraic structures called semirings (see [6], [1] for modern surveys of this area). These structures have the form (S, ⊕, ⊗, 0, 1), where the crucial property is distributivity of ⊗ over ⊕. A particularly interesting sub-case occurs when the operation ⊕ is selective, as this relates to the kinds of problems one encounters in routing in communications networks. For instance, the structure (R∪\{∞\}, min, +, ∞, 0) is associated with distances and shortest-paths in graphs. A communication network G = (V, E, a) is represented by an adjacency matrix A where A[i, j]  = a(i, j) is the weight of link (i, j)  ∈ E: A[i, j]  = 0 if there is no link from i to j. The matrix A ∗ of optimal weights is defined as A ∗ [i, j] = a(P), (1)},
	booktitle = {Proceedings of the 19th International Symposium on Mathematical Theory of Networks and Systems},
	author = {Sobrinho, João Luís and Griffin, Timothy G.},
	date = {2010},
	file = {Citeseer - Full Text PDF:/home/leo/.mozilla/firefox/dlbwkpok.default/zotero/storage/WFKJVJPW/Sobrinho and Griffin - 2010 - Routing in Equilibrium.pdf:application/pdf;Citeseer - Snapshot:/home/leo/.mozilla/firefox/dlbwkpok.default/zotero/storage/IWWKV3F7/summary.html:text/html}
}

@thesis{mcbride_dependently_1999,
	title = {Dependently Typed Functional Programs and their Proofs},
	institution = {University of Edinburgh},
	type = {phdthesis},
	author = {{McBride}, Conor},
	date = {1999},
	note = {Available from http://www.lfcs.informatics.ed.ac.uk/reports/00/{ECS}-{LFCS}-00-419/},
	file = {ECS-LFCS-00-419.pdf:/home/leo/.mozilla/firefox/dlbwkpok.default/zotero/storage/5M2T2U9P/ECS-LFCS-00-419.pdf:application/pdf}
}

@article{lehmann_algebraic_1981,
	title = {Algebraic specification of data types: A synthetic approach},
	volume = {14},
	issn = {0025-5661, 1433-0490},
	url = {http://link.springer.com/article/10.1007/BF01752392},
	doi = {10.1007/BF01752392},
	shorttitle = {Algebraic specification of data types},
	abstract = {A mathematical interpretation is given to the notion of a data type, which allows procedural data types and circularly defined data types. This interpretation seems to provide a good model for what most computer scientists would call data types, data structures, types, modes, clusters or classes. The spirit of this paper is that of {McCarthy} [43] and Hoare [18]. The mathematical treatment is the conjunction of the ideas of Scott on the solution of domain equations [34], [35], and [36] and the initiality property noticed by the {ADJ} group ({ADJ} [2] and [3]). The present work adds operations to the data types proposed by Scott and proposes an alternative to the equational specifications proposed by Guttag [14], Guttag and Horning [15] and {ADJ} [2]. The advantages of such a mathematical interpretation are the following: throwing light on some ill-understood constructs in high-level programming languages, easing the task of writing correct programs and making possible proofs of correctness for programs or implementations.},
	pages = {97--139},
	number = {1},
	journaltitle = {Mathematical systems theory},
	shortjournal = {Math. Systems Theory},
	author = {Lehmann, Daniel J. and Smyth, Michael B.},
	urldate = {2014-10-13},
	date = {1981-12-01},
	langid = {english},
	keywords = {Computational Mathematics and Numerical Analysis, Theory of Computation},
	file = {Full Text PDF:/home/leo/.mozilla/firefox/dlbwkpok.default/zotero/storage/WC8ZHJQP/Lehmann and Smyth - 1981 - Algebraic specification of data types A synthetic.pdf:application/pdf;Snapshot:/home/leo/.mozilla/firefox/dlbwkpok.default/zotero/storage/SHVJ6JD6/BF01752392.html:text/html}
}

@inproceedings{wadler_theorems_1989,
	location = {New York, {NY}, {USA}},
	title = {Theorems for Free!},
	isbn = {0-89791-328-0},
	url = {http://doi.acm.org/10.1145/99370.99404},
	doi = {10.1145/99370.99404},
	series = {{FPCA} '89},
	pages = {347--359},
	booktitle = {Proceedings of the Fourth International Conference on Functional Programming Languages and Computer Architecture},
	publisher = {{ACM}},
	author = {Wadler, Philip},
	urldate = {2014-11-05},
	date = {1989},
	file = {ACM Full Text PDF:/home/leo/.mozilla/firefox/dlbwkpok.default/zotero/storage/WGD3MIA5/Wadler - 1989 - Theorems for Free!.pdf:application/pdf}
}

@misc{gustafsson_foldable_2014,
	title = {Foldable containers and dependent types},
	author = {Gustafsson, Daniel and Pouillard, Nicolas},
	date = {2014}
}

@article{erwig_inductive_2001,
	title = {Inductive graphs and functional graph algorithms},
	volume = {11},
	issn = {1469-7653},
	url = {http://journals.cambridge.org/article_S0956796801004075},
	doi = {10.1017/S0956796801004075},
	abstract = {We propose a new style of writing graph algorithms in functional languages which is based on an alternative view of graphs as inductively defined data types. We show how this graph model can be implemented efficiently, and then we demonstrate how graph algorithms can be succinctly given by recursive function definitions based on the inductive graph view. We also regard this as a contribution to the teaching of algorithms and data structures in functional languages since we can use the functional-style graph algorithms instead of the imperative algorithms that are dominant today.},
	pages = {467--492},
	number = {5},
	journaltitle = {Journal of Functional Programming},
	author = {Erwig, Martin},
	urldate = {2014-11-01},
	date = {2001-09},
	file = {Cambridge Journals Snapshot:/home/leo/.mozilla/firefox/dlbwkpok.default/zotero/storage/CWZXXUXM/displayAbstract.html:text/html;Full Text PDF:/home/leo/.mozilla/firefox/dlbwkpok.default/zotero/storage/8G9QGUK4/Erwig - 2001 - Inductive graphs and functional graph algorithms.pdf:application/pdf}
}

@inproceedings{oliveira_functional_2012,
	location = {New York, {NY}, {USA}},
	title = {Functional Programming with Structured Graphs},
	isbn = {978-1-4503-1054-3},
	url = {http://doi.acm.org/10.1145/2364527.2364541},
	doi = {10.1145/2364527.2364541},
	series = {{ICFP} '12},
	abstract = {This paper presents a new functional programming model for graph structures called structured graphs. Structured graphs extend conventional algebraic datatypes with explicit definition and manipulation of cycles and/or sharing, and offer a practical and convenient way to program graphs in functional programming languages like Haskell. The representation of sharing and cycles (edges) employs recursive binders and uses an encoding inspired by parametric higher-order abstract syntax. Unlike traditional approaches based on mutable references or node/edge lists, well-formedness of the graph structure is ensured statically and reasoning can be done with standard functional programming techniques. Since the binding structure is generic, we can define many useful generic combinators for manipulating structured graphs. We give applications and show how to reason about structured graphs.},
	pages = {77--88},
	booktitle = {Proceedings of the 17th {ACM} {SIGPLAN} International Conference on Functional Programming},
	publisher = {{ACM}},
	author = {Oliveira, Bruno C.d.S. and Cook, William R.},
	urldate = {2014-11-01},
	date = {2012},
	keywords = {graphs, haskell, parametric hoas},
	file = {ACM Full Text PDF:/home/leo/.mozilla/firefox/dlbwkpok.default/zotero/storage/XMURD24D/Oliveira and Cook - 2012 - Functional Programming with Structured Graphs.pdf:application/pdf}
}

@article{conchon_designing_2007,
	title = {Designing a Generic Graph Library Using {ML} Functors.},
	volume = {8},
	pages = {124--140},
	journaltitle = {Trends in functional programming},
	author = {Conchon, Sylvain and Filliâtre, Jean-Christophe and Signoles, Julien},
	date = {2007},
	file = {Conchon et al. - 2007 - Designing a Generic Graph Library Using ML Functor.pdf:/home/leo/.mozilla/firefox/dlbwkpok.default/zotero/storage/GP5CFUI4/Conchon et al. - 2007 - Designing a Generic Graph Library Using ML Functor.pdf:application/pdf}
}

@inproceedings{washburn_boxes_2003,
	location = {New York, {NY}, {USA}},
	title = {Boxes Go Bananas: Encoding Higher-order Abstract Syntax with Parametric Polymorphism},
	isbn = {1-58113-756-7},
	url = {http://doi.acm.org/10.1145/944705.944728},
	doi = {10.1145/944705.944728},
	series = {{ICFP} '03},
	shorttitle = {Boxes Go Bananas},
	abstract = {Higher-order abstract syntax is a simple technique for implementing languages with functional programming. Object variables and binders are implemented by variables and binders in the host language. By using this technique, one can avoid implementing common and tricky routines dealing with variables, such as capture-avoiding substitution. However, despite the advantages this technique provides, it is not commonly used because it is difficult to write sound elimination forms (such as folds or catamorphisms) for higher-order abstract syntax. To fold over such a datatype, one must either simultaneously define an inverse operation (which may not exist) or show that all functions embedded in the datatype are parametri.In this paper, we show how first-class polymorphism can be used to guarantee the parametricity of functions embedded in higher-order abstract syntax. With this restriction, we implement a library of iteration operators over data-structures containing functionals. From this implementation, we derive "fusion laws" that functional programmers may use to reason about the iteration operator. Finally, we show how this use of parametric polymorphism corresponds to the Schürmann, Despeyroux and Pfenning method of enforcing parametricity through modal types. We do so by using this library to give a sound and complete encoding of their calculus into System F?. This encoding can serve as a starting point for reasoning about higher-order structures in polymorphic languages.},
	pages = {249--262},
	booktitle = {Proceedings of the Eighth {ACM} {SIGPLAN} International Conference on Functional Programming},
	publisher = {{ACM}},
	author = {Washburn, Geoffrey and Weirich, Stephanie},
	urldate = {2014-11-02},
	date = {2003},
	keywords = {catamorphism, higher-order abstract syntax, modal type system, parametricity, parametric polymorphism},
	file = {ACM Full Text PDF:/home/leo/.mozilla/firefox/dlbwkpok.default/zotero/storage/D4JMRQK6/Washburn and Weirich - 2003 - Boxes Go Bananas Encoding Higher-order Abstract S.pdf:application/pdf}
}

@inproceedings{chlipala_parametric_2008,
	location = {New York, {NY}, {USA}},
	title = {Parametric Higher-order Abstract Syntax for Mechanized Semantics},
	isbn = {978-1-59593-919-7},
	url = {http://doi.acm.org/10.1145/1411204.1411226},
	doi = {10.1145/1411204.1411226},
	series = {{ICFP} '08},
	abstract = {We present parametric higher-order abstract syntax ({PHOAS}), a new approach to formalizing the syntax of programming languages in computer proof assistants based on type theory. Like higher-order abstract syntax ({HOAS}), {PHOAS} uses the meta language's binding constructs to represent the object language's binding constructs. Unlike {HOAS}, {PHOAS} types are definable in general-purpose type theories that support traditional functional programming, like Coq's Calculus of Inductive Constructions. We walk through how Coq can be used to develop certified, executable program transformations over several statically-typed functional programming languages formalized with {PHOAS}; that is, each transformation has a machine-checked proof of type preservation and semantic preservation. Our examples include {CPS} translation and closure conversion for simply-typed lambda calculus, {CPS} translation for System F, and translation from a language with {ML}-style pattern matching to a simpler language with no variable-arity binding constructs. By avoiding the syntactic hassle associated with first-order representation techniques, we achieve a very high degree of proof automation.},
	pages = {143--156},
	booktitle = {Proceedings of the 13th {ACM} {SIGPLAN} International Conference on Functional Programming},
	publisher = {{ACM}},
	author = {Chlipala, Adam},
	urldate = {2014-11-02},
	date = {2008},
	keywords = {compiler verification, dependent types, interactive proof assistants, type-theoretic semantics},
	file = {ACM Full Text PDF:/home/leo/.mozilla/firefox/dlbwkpok.default/zotero/storage/AI5BHZ99/Chlipala - 2008 - Parametric Higher-order Abstract Syntax for Mechan.pdf:application/pdf}
}

@incollection{abbott_derivatives_2003,
	title = {Derivatives of Containers},
	rights = {©2003 Springer-Verlag Berlin Heidelberg},
	isbn = {978-3-540-40332-6, 978-3-540-44904-1},
	url = {http://link.springer.com/chapter/10.1007/3-540-44904-3_2},
	series = {Lecture Notes in Computer Science},
	abstract = {We are investigating {McBride}’s idea that the type of one-hole contexts are the formal derivative of a functor from a categorical perspective. Exploiting our recent work on containers we are able to characterise derivatives by a universal property and show that the laws of calculus including a rule for initial algebras as presented by {McBride} hold — hence the differentiable containers include those generated by polynomials and least fixpoints. Finally, we discuss abstract containers (i.e. quotients of containers) — this includes a container which plays the role of e x in calculus by being its own derivative.},
	pages = {16--30},
	number = {2701},
	booktitle = {Typed Lambda Calculi and Applications},
	publisher = {Springer Berlin Heidelberg},
	author = {Abbott, Michael and Altenkirch, Thorsten and Ghani, Neil and {McBride}, Conor},
	editor = {Hofmann, Martin},
	urldate = {2014-11-02},
	date = {2003-01-01},
	langid = {english},
	keywords = {Logics and Meanings of Programs, Mathematical Logic and Formal Languages, Programming Languages, Compilers, Interpreters, Programming Techniques},
	file = {Full Text PDF:/home/leo/.mozilla/firefox/dlbwkpok.default/zotero/storage/92VV94ES/Abbott et al. - 2003 - Derivatives of Containers.pdf:application/pdf;Snapshot:/home/leo/.mozilla/firefox/dlbwkpok.default/zotero/storage/5F2T7WBA/3-540-44904-3_2.html:text/html}
}

@article{abbott__2004,
	title = {∂ for Data: Differentiating Data Structures},
	volume = {65},
	issn = {0169-2968},
	url = {http://dl.acm.org/citation.cfm?id=1227143.1227145},
	shorttitle = {\&Part; for Data},
	abstract = {This paper and our conference paper (Abbott, Altenkirch, Ghani, and {McBride}, 2003b) explain and analyse the notion of the derivative of a data structure as the type of its one-hole contexts based on the central observation made by {McBride} (2001). To make the idea precise we need a generic notion of a data type, which leads to the notion of a container, introduced in (Abbott, Altenkirch, and Ghani, 2003a) and investigated extensively in (Abbott, 2003). Using containers we can provide a notion of linear map which is the concept missing from {McBride}'s first analysis. We verify the usual laws of differential calculus including the chain rule and establish laws for initial algebras and terminal coalgebras.},
	pages = {1--28},
	number = {1},
	journaltitle = {Fundam. Inf.},
	author = {Abbott, Michael and Altenkirch, Thorsten and {McBride}, Conor and Ghani, Neil},
	urldate = {2014-11-02},
	date = {2004-08}
}

@article{griffin_stable_2002,
	title = {The Stable Paths Problem and Interdomain Routing},
	volume = {10},
	issn = {1063-6692},
	url = {http://dl.acm.org/citation.cfm?id=508325.508332},
	abstract = {Dynamic routing protocols such as {RIP} and {OSPF} essentially implement distributed algorithms for solving the shortest paths problem. The border gateway protocol ({BGP}) is currently the only interdomain routing protocol deployed in the Internet. {BGP} does not solve a shortest paths problem since any interdomain protocol is required to allow policy-based metrics to override distance-based metrics and enable autonomous systems to independently define their routing policies with little or no global coordination. It is then natural to ask if {BGP} can be viewed as a distributed algorithm for solving some fundamental problem. We introduce the stable paths problem and show that {BGP} can be viewed as a distributed algorithm for solving this problem. Unlike a shortest path tree, such a solution does not represent a global optimum, but rather an equilibrium point in which each node is assigned its local optimum.We study the stable paths problem using a derived structure called a dispute wheel, representing conflicting routing policies at various nodes. We show that if no dispute wheel can be constructed, then there exists a unique solution for the stable paths problem. We define the simple path-vector protocol ({SPVP}), a distributed algorithm for solving the stable paths problem. {SPVP} is intended to capture the dynamic behavior of {BGP} at an abstract level. If {SPVP} converges, then the resulting state corresponds to a stable paths solution. If there is no solution, then {SPVP} always diverges. In fact, {SPVP} can even diverge when a solution exists. We show that {SPVP} will converge to the unique solution of an instance of the stable paths problem if no dispute wheel exists.},
	pages = {232--243},
	number = {2},
	journaltitle = {{IEEE}/{ACM} Trans. Netw.},
	author = {Griffin, Timothy G. and Shepherd, F. Bruce and Wilfong, Gordon},
	urldate = {2014-11-07},
	date = {2002-04},
	keywords = {{BGP}, Border Gateway Protocol, interdomain routing, internet routing, path vector protocols, stable routing},
	file = {ACM Full Text PDF:/home/leo/.mozilla/firefox/dlbwkpok.default/zotero/storage/B4S7FU99/Griffin et al. - 2002 - The Stable Paths Problem and Interdomain Routing.pdf:application/pdf}
}